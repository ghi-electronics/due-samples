from DUE.DUEController import DUEController

mono8x5 = [
    0x00, 0x00, 0x00, 0x00, 0x00, #  Space	0x20 */
    0x00, 0x00, 0x4f, 0x00, 0x00, #  ! */
    0x00, 0x07, 0x00, 0x07, 0x00, #  " */
    0x14, 0x7f, 0x14, 0x7f, 0x14, #  # */
    0x24, 0x2a, 0x7f, 0x2a, 0x12, #  $ */
    0x23, 0x13, 0x08, 0x64, 0x62, #  % */
    0x36, 0x49, 0x55, 0x22, 0x20, #  & */
    0x00, 0x05, 0x03, 0x00, 0x00, #  ' */
    0x00, 0x1c, 0x22, 0x41, 0x00, #  ( */
    0x00, 0x41, 0x22, 0x1c, 0x00, #  ) */
    0x14, 0x08, 0x3e, 0x08, 0x14, #  // */
    0x08, 0x08, 0x3e, 0x08, 0x08, #  + */
    0x50, 0x30, 0x00, 0x00, 0x00, #  , */
    0x08, 0x08, 0x08, 0x08, 0x08, #  - */
    0x00, 0x60, 0x60, 0x00, 0x00, #  . */
    0x20, 0x10, 0x08, 0x04, 0x02, #  / */
    0x3e, 0x51, 0x49, 0x45, 0x3e, #  0		0x30 */
    0x00, 0x42, 0x7f, 0x40, 0x00, #  1 */
    0x42, 0x61, 0x51, 0x49, 0x46, #  2 */
    0x21, 0x41, 0x45, 0x4b, 0x31, #  3 */
    0x18, 0x14, 0x12, 0x7f, 0x10, #  4 */
    0x27, 0x45, 0x45, 0x45, 0x39, #  5 */
    0x3c, 0x4a, 0x49, 0x49, 0x30, #  6 */
    0x01, 0x71, 0x09, 0x05, 0x03, #  7 */
    0x36, 0x49, 0x49, 0x49, 0x36, #  8 */
    0x06, 0x49, 0x49, 0x29, 0x1e, #  9 */
    0x00, 0x36, 0x36, 0x00, 0x00, #  : */
    0x00, 0x56, 0x36, 0x00, 0x00, #  ; */
    0x08, 0x14, 0x22, 0x41, 0x00, #  < */
    0x14, 0x14, 0x14, 0x14, 0x14, #  = */
    0x00, 0x41, 0x22, 0x14, 0x08, #  > */
    0x02, 0x01, 0x51, 0x09, 0x06, #  ? */
    0x3e, 0x41, 0x5d, 0x55, 0x1e, #  @		0x40 */
    0x7e, 0x11, 0x11, 0x11, 0x7e, #  A */
    0x7f, 0x49, 0x49, 0x49, 0x36, #  B */
    0x3e, 0x41, 0x41, 0x41, 0x22, #  C */
    0x7f, 0x41, 0x41, 0x22, 0x1c, #  D */
    0x7f, 0x49, 0x49, 0x49, 0x41, #  E */
    0x7f, 0x09, 0x09, 0x09, 0x01, #  F */
    0x3e, 0x41, 0x49, 0x49, 0x7a, #  G */
    0x7f, 0x08, 0x08, 0x08, 0x7f, #  H */
    0x00, 0x41, 0x7f, 0x41, 0x00, #  I */
    0x20, 0x40, 0x41, 0x3f, 0x01, #  J */
    0x7f, 0x08, 0x14, 0x22, 0x41, #  K */
    0x7f, 0x40, 0x40, 0x40, 0x40, #  L */
    0x7f, 0x02, 0x0c, 0x02, 0x7f, #  M */
    0x7f, 0x04, 0x08, 0x10, 0x7f, #  N */
    0x3e, 0x41, 0x41, 0x41, 0x3e, #  O */
    0x7f, 0x09, 0x09, 0x09, 0x06, #  P		0x50 */
    0x3e, 0x41, 0x51, 0x21, 0x5e, #  Q */
    0x7f, 0x09, 0x19, 0x29, 0x46, #  R */
    0x26, 0x49, 0x49, 0x49, 0x32, #  S */
    0x01, 0x01, 0x7f, 0x01, 0x01, #  T */
    0x3f, 0x40, 0x40, 0x40, 0x3f, #  U */
    0x1f, 0x20, 0x40, 0x20, 0x1f, #  V */
    0x3f, 0x40, 0x38, 0x40, 0x3f, #  W */
    0x63, 0x14, 0x08, 0x14, 0x63, #  X */
    0x07, 0x08, 0x70, 0x08, 0x07, #  Y */
    0x61, 0x51, 0x49, 0x45, 0x43, #  Z */
    0x00, 0x7f, 0x41, 0x41, 0x00, #  [ */
    0x02, 0x04, 0x08, 0x10, 0x20, #  \ */
    0x00, 0x41, 0x41, 0x7f, 0x00, #  ] */
    0x04, 0x02, 0x01, 0x02, 0x04, #  ^ */
    0x40, 0x40, 0x40, 0x40, 0x40, #  _ */
    0x00, 0x00, 0x03, 0x05, 0x00, #  `		0x60 */
    0x20, 0x54, 0x54, 0x54, 0x78, #  a */
    0x7F, 0x44, 0x44, 0x44, 0x38, #  b */
    0x38, 0x44, 0x44, 0x44, 0x44, #  c */
    0x38, 0x44, 0x44, 0x44, 0x7f, #  d */
    0x38, 0x54, 0x54, 0x54, 0x18, #  e */
    0x04, 0x04, 0x7e, 0x05, 0x05, #  f */
    0x08, 0x54, 0x54, 0x54, 0x3c, #  g */
    0x7f, 0x08, 0x04, 0x04, 0x78, #  h */
    0x00, 0x44, 0x7d, 0x40, 0x00, #  i */
    0x20, 0x40, 0x44, 0x3d, 0x00, #  j */
    0x7f, 0x10, 0x28, 0x44, 0x00, #  k */
    0x00, 0x41, 0x7f, 0x40, 0x00, #  l */
    0x7c, 0x04, 0x7c, 0x04, 0x78, #  m */
    0x7c, 0x08, 0x04, 0x04, 0x78, #  n */
    0x38, 0x44, 0x44, 0x44, 0x38, #  o */
    0x7c, 0x14, 0x14, 0x14, 0x08, #  p		0x70 */
    0x08, 0x14, 0x14, 0x14, 0x7c, #  q */
    0x7c, 0x08, 0x04, 0x04, 0x08, #  r */
    0x48, 0x54, 0x54, 0x54, 0x24, #  s */
    0x04, 0x04, 0x3f, 0x44, 0x44, #  t */
    0x3c, 0x40, 0x40, 0x20, 0x7c, #  u */
    0x1c, 0x20, 0x40, 0x20, 0x1c, #  v */
    0x3c, 0x40, 0x30, 0x40, 0x3c, #  w */
    0x44, 0x28, 0x10, 0x28, 0x44, #  x */
    0x0c, 0x50, 0x50, 0x50, 0x3c, #  y */
    0x44, 0x64, 0x54, 0x4c, 0x44, #  z */
    0x08, 0x36, 0x41, 0x41, 0x00, #  { */
    0x00, 0x00, 0x77, 0x00, 0x00, #  | */
    0x00, 0x41, 0x41, 0x36, 0x08, #  } */
    0x08, 0x08, 0x2a, 0x1c, 0x08  #  ~ */
    ]

class SSD1306Controller:
    vram = bytearray(int(128 * 64 / 8 + 1))
    buffer2 = bytearray(2)
    Width = 128
    Height = 64

    

    def __init__(self, dueController: DUEController, slaveAddress = 0x3C) -> None:
        self.dueController = dueController
        self.SlaveAddress = slaveAddress

        self.vram[0] = 0x40

        self.__SendCommand(0xAE) # turn off oled panel
        self.__SendCommand(0x00) # set low column address
        self.__SendCommand(0x10) # set high column address
        self.__SendCommand(0x40) # set start line address
        self.__SendCommand(0x81) # set contrast control register
        self.__SendCommand(0xCF)
        self.__SendCommand(0xA1) # set segment re-map 95 to 0
        self.__SendCommand(0xA6) # set normal display
        self.__SendCommand(0xA8) # set multiplex ratio(1 to 64)
        self.__SendCommand(0x3F) # 1/64 duty
        self.__SendCommand(0xD3) # set display offset
        self.__SendCommand(0x00) # not offset
        self.__SendCommand(0xD5) # set display clock divide ratio/oscillator frequency
        self.__SendCommand(0x80) # set divide ratio
        self.__SendCommand(0xD9) # set pre-charge period
        self.__SendCommand(0xF1)
        self.__SendCommand(0xDA) # set com pins hardware configuration
        self.__SendCommand(0x12)
        self.__SendCommand(0xDB) # set vcomh
        self.__SendCommand(0x40) # set startline 0x0
        self.__SendCommand(0x8D) # set Charge Pump enable/disable
        self.__SendCommand(0x14) # set(0x10) disable
        self.__SendCommand(0xAF) # turn on oled panel
        self.__SendCommand(0xC8) # mirror the screen

        # Mapping
        self.__SendCommand(0x20)
        self.__SendCommand(0x00)
        self.__SendCommand(0x21)
        self.__SendCommand(0)
        self.__SendCommand(128 - 1)
        self.__SendCommand(0x22)
        self.__SendCommand(0)
        self.__SendCommand(7)

    def __SendCommand(self, cmd: int):
        self.buffer2[1] = cmd
        self.dueController.I2c.Write(self.SlaveAddress, self.buffer2)

    def SetColorFormat(self, invert: bool):
        if invert == True:
            self.__SendCommand(self, 0xA7)
        else:
            self.__SendCommand(self, 0xA6)

    def ShowData(self, data: bytearray, offset: int, length: int) :
        if data == 0 or (offset+ length) > len(data):
            raise ("Argument out of range exception")
        
        for i in range(1, len(data)-1):
            self.vram[1 + i] = data[i]
        
        self.dueController.I2c.Write(self.SlaveAddress, self.vram)

    def Show(self) :                                 
        self.dueController.I2c.Write(self.SlaveAddress, self.vram)    

    def SetPixel(self, x: int, y: int, color: int):
        if (x < 0 or y < 0 or  x >= self.Width or y >= self.Height):
            return
        
        index = int(int(y / 8) * self.Width + x)

        if (color != 0):
            self.vram[1 + index] |= (1 << (y % 8))
        else:
            self.vram[1 + index] &= (~(1 << (y % 8)))  

    def Clear(self):
        for i in range (len(self.vram)):
            self.vram[i] = 0
            
        self.vram[0] = 0x40

    def DrawCharacter(self, character, color, x, y, hScale = 1, vScale = 1):
        index = 5 * (character - 32)
        
        if (hScale != 1 or vScale != 1):
            for horizontalFontSize in range(5):
                for hs in range(hScale):
                    for verticleFontSize in range(8):
                        for vs in range (vScale):                                                
                            if (mono8x5[index + horizontalFontSize] & (1 << verticleFontSize)) != 0:
                                self.SetPixel(x + (horizontalFontSize * hScale) + hs, y + (verticleFontSize * vScale) + vs, color)
        else:
            for horizontalFontSize in range(5):
                sx = x + horizontalFontSize
                fontRow = mono8x5[index + horizontalFontSize]
                for verticleFontSize in range(8):
                    if ((fontRow & (1 << verticleFontSize)) != 0):
                        self.SetPixel(sx, y + verticleFontSize, color)
    
    def DrawString(self, text, color, x, y, hScale = 1, vScale=1):
        originalX = x
        for i in range(len(text)):
            if ord(text[i]) >=32 :
                self.DrawCharacter(ord(text[i]), color, x, y, hScale, vScale)
                x += 6*hScale
            else:
                if text[i] == '\n':
                    y += 9 * vScale
                    x = originalX
                else:
                    if text[i] == '\r':
                        x = originalX






