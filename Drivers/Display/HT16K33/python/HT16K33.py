from DUE.DUEController import DUEController
import array

mono8x5 = [
    0x00, 0x00, 0x00, 0x00, 0x00, #  Space	0x20 */
    0x00, 0x00, 0x4f, 0x00, 0x00, #  ! */
    0x00, 0x07, 0x00, 0x07, 0x00, #  " */
    0x14, 0x7f, 0x14, 0x7f, 0x14, #  # */
    0x24, 0x2a, 0x7f, 0x2a, 0x12, #  $ */
    0x23, 0x13, 0x08, 0x64, 0x62, #  % */
    0x36, 0x49, 0x55, 0x22, 0x20, #  & */
    0x00, 0x05, 0x03, 0x00, 0x00, #  ' */
    0x00, 0x1c, 0x22, 0x41, 0x00, #  ( */
    0x00, 0x41, 0x22, 0x1c, 0x00, #  ) */
    0x14, 0x08, 0x3e, 0x08, 0x14, #  // */
    0x08, 0x08, 0x3e, 0x08, 0x08, #  + */
    0x50, 0x30, 0x00, 0x00, 0x00, #  , */
    0x08, 0x08, 0x08, 0x08, 0x08, #  - */
    0x00, 0x60, 0x60, 0x00, 0x00, #  . */
    0x20, 0x10, 0x08, 0x04, 0x02, #  / */
    0x3e, 0x51, 0x49, 0x45, 0x3e, #  0		0x30 */
    0x00, 0x42, 0x7f, 0x40, 0x00, #  1 */
    0x42, 0x61, 0x51, 0x49, 0x46, #  2 */
    0x21, 0x41, 0x45, 0x4b, 0x31, #  3 */
    0x18, 0x14, 0x12, 0x7f, 0x10, #  4 */
    0x27, 0x45, 0x45, 0x45, 0x39, #  5 */
    0x3c, 0x4a, 0x49, 0x49, 0x30, #  6 */
    0x01, 0x71, 0x09, 0x05, 0x03, #  7 */
    0x36, 0x49, 0x49, 0x49, 0x36, #  8 */
    0x06, 0x49, 0x49, 0x29, 0x1e, #  9 */
    0x00, 0x36, 0x36, 0x00, 0x00, #  : */
    0x00, 0x56, 0x36, 0x00, 0x00, #  ; */
    0x08, 0x14, 0x22, 0x41, 0x00, #  < */
    0x14, 0x14, 0x14, 0x14, 0x14, #  = */
    0x00, 0x41, 0x22, 0x14, 0x08, #  > */
    0x02, 0x01, 0x51, 0x09, 0x06, #  ? */
    0x3e, 0x41, 0x5d, 0x55, 0x1e, #  @		0x40 */
    0x7e, 0x11, 0x11, 0x11, 0x7e, #  A */
    0x7f, 0x49, 0x49, 0x49, 0x36, #  B */
    0x3e, 0x41, 0x41, 0x41, 0x22, #  C */
    0x7f, 0x41, 0x41, 0x22, 0x1c, #  D */
    0x7f, 0x49, 0x49, 0x49, 0x41, #  E */
    0x7f, 0x09, 0x09, 0x09, 0x01, #  F */
    0x3e, 0x41, 0x49, 0x49, 0x7a, #  G */
    0x7f, 0x08, 0x08, 0x08, 0x7f, #  H */
    0x00, 0x41, 0x7f, 0x41, 0x00, #  I */
    0x20, 0x40, 0x41, 0x3f, 0x01, #  J */
    0x7f, 0x08, 0x14, 0x22, 0x41, #  K */
    0x7f, 0x40, 0x40, 0x40, 0x40, #  L */
    0x7f, 0x02, 0x0c, 0x02, 0x7f, #  M */
    0x7f, 0x04, 0x08, 0x10, 0x7f, #  N */
    0x3e, 0x41, 0x41, 0x41, 0x3e, #  O */
    0x7f, 0x09, 0x09, 0x09, 0x06, #  P		0x50 */
    0x3e, 0x41, 0x51, 0x21, 0x5e, #  Q */
    0x7f, 0x09, 0x19, 0x29, 0x46, #  R */
    0x26, 0x49, 0x49, 0x49, 0x32, #  S */
    0x01, 0x01, 0x7f, 0x01, 0x01, #  T */
    0x3f, 0x40, 0x40, 0x40, 0x3f, #  U */
    0x1f, 0x20, 0x40, 0x20, 0x1f, #  V */
    0x3f, 0x40, 0x38, 0x40, 0x3f, #  W */
    0x63, 0x14, 0x08, 0x14, 0x63, #  X */
    0x07, 0x08, 0x70, 0x08, 0x07, #  Y */
    0x61, 0x51, 0x49, 0x45, 0x43, #  Z */
    0x00, 0x7f, 0x41, 0x41, 0x00, #  [ */
    0x02, 0x04, 0x08, 0x10, 0x20, #  \ */
    0x00, 0x41, 0x41, 0x7f, 0x00, #  ] */
    0x04, 0x02, 0x01, 0x02, 0x04, #  ^ */
    0x40, 0x40, 0x40, 0x40, 0x40, #  _ */
    0x00, 0x00, 0x03, 0x05, 0x00, #  `		0x60 */
    0x20, 0x54, 0x54, 0x54, 0x78, #  a */
    0x7F, 0x44, 0x44, 0x44, 0x38, #  b */
    0x38, 0x44, 0x44, 0x44, 0x44, #  c */
    0x38, 0x44, 0x44, 0x44, 0x7f, #  d */
    0x38, 0x54, 0x54, 0x54, 0x18, #  e */
    0x04, 0x04, 0x7e, 0x05, 0x05, #  f */
    0x08, 0x54, 0x54, 0x54, 0x3c, #  g */
    0x7f, 0x08, 0x04, 0x04, 0x78, #  h */
    0x00, 0x44, 0x7d, 0x40, 0x00, #  i */
    0x20, 0x40, 0x44, 0x3d, 0x00, #  j */
    0x7f, 0x10, 0x28, 0x44, 0x00, #  k */
    0x00, 0x41, 0x7f, 0x40, 0x00, #  l */
    0x7c, 0x04, 0x7c, 0x04, 0x78, #  m */
    0x7c, 0x08, 0x04, 0x04, 0x78, #  n */
    0x38, 0x44, 0x44, 0x44, 0x38, #  o */
    0x7c, 0x14, 0x14, 0x14, 0x08, #  p		0x70 */
    0x08, 0x14, 0x14, 0x14, 0x7c, #  q */
    0x7c, 0x08, 0x04, 0x04, 0x08, #  r */
    0x48, 0x54, 0x54, 0x54, 0x24, #  s */
    0x04, 0x04, 0x3f, 0x44, 0x44, #  t */
    0x3c, 0x40, 0x40, 0x20, 0x7c, #  u */
    0x1c, 0x20, 0x40, 0x20, 0x1c, #  v */
    0x3c, 0x40, 0x30, 0x40, 0x3c, #  w */
    0x44, 0x28, 0x10, 0x28, 0x44, #  x */
    0x0c, 0x50, 0x50, 0x50, 0x3c, #  y */
    0x44, 0x64, 0x54, 0x4c, 0x44, #  z */
    0x08, 0x36, 0x41, 0x41, 0x00, #  { */
    0x00, 0x00, 0x77, 0x00, 0x00, #  | */
    0x00, 0x41, 0x41, 0x36, 0x08, #  } */
    0x08, 0x08, 0x2a, 0x1c, 0x08  #  ~ */
    ]



class HT16K33Controller:    

    HT16K33_CMD_BRIGHTNESS = 0xE0
    HT16K33_BLINK_CMD = 0x80
    HT16K33_BLINK_DISPLAYON = 0x01
    HT16K33_OSCILLATOR_ON = 0x21

    def __init__(self, dueController: DUEController, slaveAddress = 0x70, row: int = 8, column: int = 8, rotation = 0 ) -> None:
        self.dueController = dueController
        self.SlaveAddress = slaveAddress
        self.row = row
        self.column = column
        self._rotaton = rotation
        self.data = array.array('H', (0 for i in range(0,row)))

        cmd = bytearray(1)
        cmd[0] = HT16K33Controller.HT16K33_OSCILLATOR_ON

        self.dueController.I2c.Write(self.SlaveAddress, cmd,  0, len(cmd))

        cmd[0] = HT16K33Controller.HT16K33_BLINK_CMD |HT16K33Controller. HT16K33_BLINK_DISPLAYON

        self.dueController.I2c.Write(self.SlaveAddress, cmd,  0, len(cmd))

    def get_brightness(self):
        return self._brightness
    
    def set_brightness(self, value: int):
        self._brightness = value
        if self._brightness < 0 or self._brightness > 15:
            raise Exception("brightness must be in range [0,15]")
        cmd = bytearray(1)
        cmd[0] = (HT16K33Controller.HT16K33_CMD_BRIGHTNESS | self._brightness)

        self.dueController.I2c.Write(self.SlaveAddress, cmd,  0, len(cmd))

    Brightness = property(get_brightness, set_brightness)

    def get_rotation(self):
        return self._rotaton
    
    def set_rotation(self, value: int):
        if value < 0 or value > 3:
            raise Exception("brightness must be in range [0,3]")
        
        self._rotaton = value

    Rotation = property(get_rotation,set_rotation)

    def SetPixel(self, x: int, y: int, color: int):
        if (x < 0 or x > self.column):
            raise Exception(f"x must be in range [0,{self.column}]")

        if (y < 0 or y > self.row):
            raise Exception(f"y must be in range [0,{self.row}]")
        
        match self._rotaton:
            case 1:
                x,y = y,x
                x = self.column - x- 1
            case 2:
                x = self.column - x - 1
                y = self.row - y- 1

            case 3:
                x, y = y ,x 
                y = self.row - y - 1

        x = x + 7
        x = int(x % 8)

        if color != 0:
            self.data[y] = self.data[y]  | (1 << x)
        else:
            self.data[y] = self.data[y]  & (~(1 << x))        
    
    def Clear(self):
        for i in range (0, len(self.data)):
            self.data[i] = 0


    def Show(self) :                                 
        dataWrite = bytearray(len(self.data) * 2 +  1)   
        dataWrite[0] = 0 #cmd        

        for i in range (0, len(self.data)):
            dataWrite[1 + i * 2 + 0] =  self.data[i] & 0xFF
            dataWrite[1 + i * 2 + 1] =  (self.data[i] << 8) & 0xFF

        self.dueController.I2c.Write(self.SlaveAddress, dataWrite, 0, len(dataWrite));

    def DrawCharacter(self, c, color, x, y, hScale = 1, vScale = 1):
        character = ord(c)
        index = 5 * (character - 32)
        
        if (hScale != 1 or vScale != 1):
            for horizontalFontSize in range(5):
                for hs in range(hScale):
                    for verticleFontSize in range(8):
                        for vs in range (vScale):                                                
                            if (mono8x5[index + horizontalFontSize] & (1 << verticleFontSize)) != 0:
                                self.SetPixel(x + (horizontalFontSize * hScale) + hs, y + (verticleFontSize * vScale) + vs, color)
        else:
            for horizontalFontSize in range(5):
                sx = x + horizontalFontSize
                fontRow = mono8x5[index + horizontalFontSize]
                for verticleFontSize in range(8):
                    if ((fontRow & (1 << verticleFontSize)) != 0):
                        self.SetPixel(sx, y + verticleFontSize, color)






