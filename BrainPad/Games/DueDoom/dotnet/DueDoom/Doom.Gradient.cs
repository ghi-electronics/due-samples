using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DueDoom
{
    internal partial class Doom
    {
        const int GradientWidth = 2;
        const int GradientHeight = 8;
        const int GradientCount = 8;

        byte[] gradient = 
        {
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x00, 0x00,
          0x88, 0x88,
          0x00, 0x00,
          0x22, 0x22,
          0x00, 0x00,
          0x8a, 0x8a,
          0x00, 0x00,
          0x22, 0x22,
          0x00, 0x00,
          0xaa, 0xaa,
          0x10, 0x10,
          0xaa, 0xaa,
          0x00, 0x00,
          0xaa, 0xaa,
          0x01, 0x01,
          0xaa, 0xaa,
          0x44, 0x44,
          0xaa, 0xaa,
          0x55, 0x55,
          0xaa, 0xaa,
          0x44, 0x44,
          0xaa, 0xaa,
          0x15, 0x55,
          0xaa, 0xaa,
          0x55, 0x55,
          0xaa, 0xaa,
          0x55, 0x55,
          0xbb, 0xbb,
          0x55, 0x55,
          0xaa, 0xea,
          0x55, 0x55,
          0xbb, 0xbb,
          0x55, 0x55,
          0xff, 0xff,
          0x55, 0x55,
          0xfb, 0xfb,
          0x55, 0x55,
          0xff, 0xff,
          0x55, 0x55,
          0xbb, 0xbf,
          0x57, 0x57,
          0xff, 0xff,
          0xdd, 0xdd,
          0xff, 0xff,
          0x77, 0x75,
          0xff, 0xff,
          0xdd, 0xdd,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
          0xff, 0xff,
        };

        bool GetGradientPixel(int x, int y, int i)
        {
            if (i == 0) return false;
            if (i >= GradientCount - 1) return true;
            var index = Math.Max(0, Math.Min(GradientCount - 1, i)) * GradientWidth * GradientHeight // gradient index
                  + y * GradientWidth % (GradientWidth * GradientHeight)                             // y byte offset
                  + x / GradientHeight % GradientWidth;                                              // x byte offset

            return this.ReadBit(this.gradient[index], (byte)(x % 8));
        }

        bool ReadBit(byte b, byte bit) => (b & (1 << bit)) != 0;
    }
}
